package leap

import (
	"log"
	"reflect"
	"testing"
)

// Encode sample data to a file.
func TestEncodeJSON(t *testing.T) {
	log.Println("Running TestEncodeJSON...")

	// Prepare testData that the decoded result will be compared to.
	var testData []Place
	testData = append(testData, Place{"./", "home"})
	testData = append(testData, Place{"/", "root"})

	err := encodeJSON(testFilePath, testData)
	if err != nil {
		t.Error(err.Error())
	}

	// Now that the file has been encoded, decode and compare.
	decodedData, err := decodeJSON(testFilePath)
	if err != nil {
		t.Error(err.Error())
	}

	if reflect.DeepEqual(decodedData, testData) != true {
		t.Errorf("Content mismatch.")
	}
}

// Read a sample JSON file and check the results.
func TestDecodeJSON(t *testing.T) {
	log.Print("Running TestDecodeJSON...")

	// Prepare testData that the decoded result will be compared to.
	var testData []Place
	testData = append(testData, Place{"./", "home"})
	testData = append(testData, Place{"/", "root"})

	// Decode normally, fail on any error which is generated by json pkg.
	content, err := decodeJSON("sampleConfig.json")
	if err != nil {
		t.Error(err.Error())
	}

	// Compare equality of returned content and test data. Fail if unequal.
	if reflect.DeepEqual(content, testData) != true {
		t.Errorf("Content mismatch.")
	}
}
